
package milkdocc;

import java.sql.*;

import java.sql.Date;
import java.util.*;


class DBConnection

{
    private static final String URL = "jdbc:postgresql://localhost:5432/Core_Java_Project";
    private static final String USER = "postgres"; 
    private static final String PASSWORD = "arundati@44";

    public static Connection getConnection() throws SQLException 
    
    {
        try 
        
        {
            Class.forName("org.postgresql.Driver"); 
        } 
        catch (ClassNotFoundException e) 
        
        {
            System.out.println("PostgreSQL JDBC Driver not found!");
            e.printStackTrace();
        }

        return DriverManager.getConnection(URL, USER, PASSWORD);
    }
}


class MilkProvider 

{
 int id;
 String name, contact, address;

 public MilkProvider(String name, String contact, String address) 
 
 {
     this.name = name; 
     this.contact = contact; 
     this.address = address;
 }
 
 public MilkProvider(int id, String name, String contact, String address) 
 
 {
     this(name, contact, address);
     this.id = id;
 }
}

class MilkRecord
{
 int providerId;
 String date;
 double quantity, fatContent, ratePerLitre;

 public MilkRecord(int providerId, String date, double quantity, double fatContent, double ratePerLitre) 
 
 {
     this.providerId = providerId; 
     this.date = date;
     this.quantity = quantity;
     this.fatContent = fatContent;
     this.ratePerLitre = ratePerLitre;
 }
}

class MilkOperations 

{
 Scanner sc = new Scanner(System.in);

 public void addMilkProvider() 
 
 {
     try (Connection con = DBConnection.getConnection())
     
     {
         System.out.print("Enter Frist Name: ");
         String name = sc.nextLine();
         
         System.out.print("Enter Contact: ");
         String contact = sc.nextLine();
         
         System.out.print("Enter Address: ");
         String address = sc.nextLine();
         
         String sql = "insert into milk_provider (name, contact, address) values (?, ?, ?)";
         PreparedStatement ps = con.prepareStatement(sql);
         
         ps.setString(1, name);
         ps.setString(2, contact);
         ps.setString(3, address);
         ps.executeUpdate();
         System.out.println("Milk Provider Added Successfully!");
     } 
     catch (SQLException e) 
     { 
    	 e.printStackTrace(); 
    	 
     }
 }

 public void addMilkRecord() 
 {
     try (Connection con = DBConnection.getConnection())
     
     {
         System.out.print("Enter Provider ID: ");
         int providerId = sc.nextInt(); 
         sc.nextLine();
         
         System.out.print("Enter Date (YYYY-MM-DD): "); 
         String date = sc.nextLine();
         
         System.out.print("Enter Quantity: "); 
         double qty = sc.nextDouble();
         
         System.out.print("Enter Fat Content: "); 
         double fat = sc.nextDouble();
         
         System.out.print("Enter Rate/Litre: "); 
         double rate = sc.nextDouble();
         
         
         String sql = "insert into milk_record (provider_id, date, quantity, fat_content, rate_per_litre) values(?, ?, ?, ?, ?)";
         PreparedStatement ps = con.prepareStatement(sql);
         
         ps.setInt(1, providerId); 
         ps.setDate(2, Date.valueOf(date));
         
         ps.setDouble(3, qty);
         ps.setDouble(4, fat);
         ps.setDouble(5, rate);
         ps.executeUpdate();
         
         System.out.println("Milk Record Added Successfully!");
     } 
     catch (SQLException e) 
     
     { 
    	 e.printStackTrace(); 
    	 
     }
 }

 public void calculateTotalPayment()
 {
     try (Connection con = DBConnection.getConnection())
     
     {
         System.out.print("Enter Provider ID: "); 
         int pid = sc.nextInt();
         sc.nextLine();
         
         String sql = "SELECT SUM(quantity * rate_per_litre) AS total_payment FROM milk_record WHERE provider_id = ?";
         PreparedStatement ps = con.prepareStatement(sql);
         
         ps.setInt(1, pid);
         ResultSet rs = ps.executeQuery();
         
         if (rs.next()) 
        	 
        	 System.out.println("Total Payment Due: ₹" + rs.getDouble("total_payment"));
     } 
     
     catch (SQLException e) 
     { 
    	 e.printStackTrace(); 
     }
 }

 public void showAllProviders() 
 {
     try (Connection con = DBConnection.getConnection())
     {
         Statement stmt = con.createStatement();
         ResultSet rs = stmt.executeQuery("SELECT * FROM milk_provider");
         while (rs.next())
             System.out.println(rs.getInt("provider_id") + " - " + rs.getString("name") + " | " + rs.getString("contact") + " | " + rs.getString("address"));
     } 
     catch (SQLException e) 
     { 
    	 e.printStackTrace(); 
     }
 }

 public void recordPayment()
 {
     try (Connection con = DBConnection.getConnection()) 
     {
         System.out.print("Enter Provider ID: ");
         int pid = sc.nextInt();
         
         System.out.print("Enter Amount: ");
         double amt = sc.nextDouble();
         sc.nextLine();
         
         System.out.print("Enter Payment Date (YYYY-MM-DD): ");
         String date = sc.nextLine();
         
         String sql = "INSERT INTO payment (provider_id, amount, payment_date) VALUES (?, ?, ?)";
         PreparedStatement ps = con.prepareStatement(sql);
         
         ps.setInt(1, pid); 
         ps.setDouble(2, amt);
         ps.setDate(3, Date.valueOf(date));
         ps.executeUpdate();
         
         System.out.println("Payment Recorded Successfully!");
     } 
     catch (SQLException e) 
     {
    	 e.printStackTrace();
     }
 }

 public void updateMilkRecord()
 {
     try (Connection con = DBConnection.getConnection()) 
     
     {
         System.out.print("Enter Record ID: ");
         int rid = sc.nextInt();
         
         System.out.print("Enter New Quantity: ");
         double qty = sc.nextDouble();
         
         System.out.print("Enter New Fat Content: "); 
         double fat = sc.nextDouble();
         
         System.out.print("Enter New Rate/Litre: ");
         double rate = sc.nextDouble();
         
         String sql = "UPDATE milk_record SET quantity=?, fat_content=?, rate_per_litre=? WHERE record_id=?";
         PreparedStatement ps = con.prepareStatement(sql);
         
         ps.setDouble(1, qty); 
         ps.setDouble(2, fat);
         ps.setDouble(3, rate);
         ps.setInt(4, rid);
         
         System.out.println(ps.executeUpdate() > 0 ? "Record Updated Successfully!" : "Record Not Found!");
     } 
     
     catch (SQLException e)
     
     {
    	 e.printStackTrace(); 
     }
 }

 public void deleteMilkRecord() 
 {
     try (Connection con = DBConnection.getConnection())
     {
         System.out.print("Enter Record ID to Delete: ");
         int rid = sc.nextInt();
         
         String sql = "DELETE FROM milk_record WHERE record_id=?";
         PreparedStatement ps = con.prepareStatement(sql);
         ps.setInt(1, rid);
         
         System.out.println(ps.executeUpdate() > 0 ? "Record Deleted!" : "Record Not Found!");
     } 
     catch (SQLException e)
     
     { 
    	 e.printStackTrace();
     }
 }

 public void viewMilkRecordsByProviderAndDate() 
 
 {
     try (Connection con = DBConnection.getConnection())
     
     {
         System.out.print("Enter Provider ID: "); 
         int pid = sc.nextInt();
         sc.nextLine();
         
         System.out.print("Enter Date (YYYY-MM-DD): ");
         String date = sc.nextLine();
         
         String sql = "SELECT * FROM milk_record WHERE provider_id = ? AND date = ?";
         PreparedStatement ps = con.prepareStatement(sql);
         
         ps.setInt(1, pid); ps.setDate(2, Date.valueOf(date));
         ResultSet rs = ps.executeQuery();
         
         while (rs.next()) 
         {
             System.out.println("Qty: " + rs.getDouble("quantity") + ", Fat: " + rs.getDouble("fat_content") + ", Rate: " + rs.getDouble("rate_per_litre"));
         }
     } 
     catch (SQLException e) 
      
     { 
    	 e.printStackTrace();
     }
 }

 public void monthlySummary() 
 {
     try (Connection con = DBConnection.getConnection())
     
     {
         System.out.print("Enter Provider ID: "); 
         int pid = sc.nextInt(); 
         sc.nextLine();
         
         System.out.print("Enter Month (YYYY-MM): ");
         String month = sc.nextLine();
         
         String sql = "SELECT SUM(quantity) AS total_qty, SUM(quantity * rate_per_litre) AS total_amt FROM milk_record WHERE provider_id = ? AND TO_CHAR(date, 'YYYY-MM') = ?";
         PreparedStatement ps = con.prepareStatement(sql);
         
         ps.setInt(1, pid);
         ps.setString(2, month);
         
         ResultSet rs = ps.executeQuery();
         if (rs.next()) 
         {
             System.out.println("Total Qty: " + rs.getDouble("total_qty") + ", Total Amount: ₹" + rs.getDouble("total_amt"));
         }
     } 
     catch (SQLException e) 
     {
    	 e.printStackTrace();
     }
 }

 public void pendingPayments() 
 {
     try (Connection con = DBConnection.getConnection())
     {
         System.out.print("Enter Provider ID: ");
         int pid = sc.nextInt();
         
         String sql1 = "SELECT COALESCE(SUM(quantity * rate_per_litre),0) FROM milk_record WHERE provider_id=?";
         String sql2 = "SELECT COALESCE(SUM(amount),0) FROM payment WHERE provider_id=?";
         
         PreparedStatement ps1 = con.prepareStatement(sql1);
         ps1.setInt(1, pid);
         
         ResultSet rs1 = ps1.executeQuery();
         rs1.next();
         
         PreparedStatement ps2 = con.prepareStatement(sql2);
         
         ps2.setInt(1, pid); 
         ResultSet rs2 = ps2.executeQuery(); 
         rs2.next();
         
         System.out.println("Pending Payment: ₹" + (rs1.getDouble(1) - rs2.getDouble(1)));
     } 
     
     catch (SQLException e) 
     {
    	 e.printStackTrace(); 
    	 
     }
 }

 public void highestSupplierOfDay() 
 {
     try (Connection con = DBConnection.getConnection()) 
     
     {
         System.out.print("Enter Date (YYYY-MM-DD): ");
         String date = sc.nextLine();
         
         String sql = "SELECT p.name, SUM(r.quantity) AS total_qty FROM milk_provider p JOIN milk_records r ON p.provider_id = r.provider_id WHERE r.date = ? GROUP BY p.name ORDER BY total_qty DESC LIMIT 1";
         PreparedStatement ps = con.prepareStatement(sql);
         
         ps.setDate(1, Date.valueOf(date));
         ResultSet rs = ps.executeQuery();
         
         if (rs.next())
         {
             System.out.println("Top Supplier: " + rs.getString("name") + " | Quantity: " + rs.getDouble("total_qty") + " L");
         } 
         else
         {
             System.out.println("No records found.");
         }
     } 
     catch (SQLException e) 
     { 
    	 e.printStackTrace(); 
     }
 }
}
public class MainApp
{
 public static void main(String[] args) 
 {
     MilkOperations op = new MilkOperations();
     Scanner sc = new Scanner(System.in);

     while (true)
     
     {
         System.out.println("\n--- MilkDoc Menu ---");
         System.out.println("1. Add Milk Provider");
         System.out.println("2. Add Milk Record");
         System.out.println("3. Calculate Total Payment");
         System.out.println("4. Show All Providers");
         System.out.println("5. Record Payment");
         System.out.println("6. Update Milk Record");
         System.out.println("7. Delete Milk Record");
         System.out.println("8. View Milk Records by Date");
         System.out.println("9. Monthly Summary Report");
         System.out.println("10. Check Pending Payments");
         System.out.println("11. Get Top Supplier of the Day");
         System.out.println("12. Exit");
         System.out.print("Enter choice: ");
         
         int ch = sc.nextInt();
         switch (ch) 
         
       {
         case 1:
             Thread t1 = new Thread(() -> op.addMilkProvider());
             t1.start();
             try 
             { 
                 t1.join();
             } 
             catch (InterruptedException e)
             { 
                 e.printStackTrace(); 
             }
             break;
             
         case 2:
             Thread t2 = new Thread(() -> op.addMilkRecord());
             t2.start();
             try 
             { 
                 t2.join();
             } 
             catch (InterruptedException e)
             { 
                 e.printStackTrace(); 
             }
             break;
             
         case 3:
             Thread t3 = new Thread(() -> op.calculateTotalPayment());
             t3.start();
             try 
             { 
                 t3.join();
             } 
             catch (InterruptedException e)
             { 
                 e.printStackTrace(); 
             }
             break;
             
         case 4:
             Thread t4 = new Thread(() -> op.showAllProviders());
             t4.start();
             try 
             { 
                 t4.join();
             } 
             catch (InterruptedException e)
             { 
                 e.printStackTrace(); 
             }
             break;
             
         case 5:
             Thread t5 = new Thread(() -> op.recordPayment());
             t5.start();
             try 
             { 
                 t5.join();
             } 
             catch (InterruptedException e)
             { 
                 e.printStackTrace(); 
             }
             break;
             
         case 6:
             Thread t6 = new Thread(() -> op.updateMilkRecord());
             t6.start();
             try 
             { 
                 t6.join();
             } 
             catch (InterruptedException e)
             { 
                 e.printStackTrace(); 
             }
             break;
             
         case 7:
             Thread t7 = new Thread(() -> op.deleteMilkRecord());
             t7.start();
             try 
             { 
                 t7.join();
             } 
             catch (InterruptedException e)
             { 
                 e.printStackTrace(); 
             }
             break;
             
         case 8:
             Thread t8 = new Thread(() -> op.viewMilkRecordsByProviderAndDate());
             t8.start();
             try 
             { 
                 t8.join();
             } 
             catch (InterruptedException e)
             { 
                 e.printStackTrace(); 
             }
             break;
             
         case 9:
             Thread t9 = new Thread(() -> op.monthlySummary());
             t9.start();
             try 
             { 
                 t9.join();
             } 
             catch (InterruptedException e)
             { 
                 e.printStackTrace(); 
             }
             break;
             
         case 10:
             Thread t10 = new Thread(() -> op.pendingPayments());
             t10.start();
             try 
             { 
                 t10.join();
             } 
             catch (InterruptedException e)
             { 
                 e.printStackTrace(); 
             }
             break;
             
         case 11:
             Thread t11 = new Thread(() -> op.highestSupplierOfDay());
             t11.start();
             try 
             { 
                 t11.join();
             } 
             catch (InterruptedException e)
             { 
                 e.printStackTrace(); 
             }
             break;
             
         case 12:
             System.out.println("Thank you!");
             return;
             
         default:
             System.out.println("Invalid Choice!");
             break;
     }

     }
 }
}
